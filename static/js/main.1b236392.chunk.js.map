{"version":3,"sources":["images.png","components/Header.js","components/MiniWeatherBox.js","api.js","components/WeatherDetails.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","handleChange","e","setState","city","target","value","handleSubmit","makeApiCall","state","className","src","logo","alt","type","id","aria-describedby","placeholder","onChange","this","onClick","Component","MiniWeatherBox","weather","date","Date","getDay","icon","Math","round","temp","WeatherDetails","weather_main","pressure","humidity","wind_speed","Main","updateState","data","days","i","push","list","main","dt_txt","weather_desc","description","wind","speed","name","a","fetch","then","response","json","console","log","catch","err","fetchWeatherDetails","bind","MiniWeatherBoxes","weatherBoxes","slice","map","day","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1b236392.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/images.3023f800.png\";","import React, {Component} from 'react';\r\nimport './Header.css';\r\nimport logo from '../images.png';\r\n\r\nclass Header extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            city: '',\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            city: e.target.value\r\n        });\r\n    }\r\n    handleSubmit =(e) => {\r\n        this.props.makeApiCall(this.state.city);\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"col-12 py-4 header\">\r\n                <h1 className=\"col-12 header-title\">\r\n                    <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                    Weather App\r\n                </h1>\r\n                <div className=\"py-2 search-wrapper\">\r\n                    <input type=\"text\" className=\"search form-control\" id=\"location\" aria-describedby=\"\" placeholder=\"Enter Location\" onChange={this.handleChange} />\r\n                    <button type=\"submit\" onClick={this.handleSubmit} className=\"fa fa-search\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { baseUrlImage } from '../api';\r\n\r\nconst getDay = (date) => {\r\n    let weekdays = ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'];\r\n    return weekdays[new Date(date).getDay()];\r\n};\r\n\r\nconst MiniWeatherBox = (props) => {\r\n    \r\n    if(props.weather){\r\n        return (\r\n            <div className=\"\">\r\n                <h2>\r\n                    {getDay(props.weather.date)}\r\n                </h2>\r\n                <h2>\r\n                    <img src={baseUrlImage + props.weather.icon + '@2x.png'} alt=\"icon\" />\r\n                </h2>\r\n                {Math.round(props.weather.temp - 273.15)}°C\r\n            </div>\r\n        );\r\n    }\r\n    else{\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MiniWeatherBox;","export const baseUrl = \"https://api.openweathermap.org/data/2.5/forecast?\";\r\nexport const API_KEY = \"6557810176c36fac5f0db536711a6c52\";\r\nexport const baseUrlImage = \"http://openweathermap.org/img/wn/\";","import React from 'react';\r\nimport { baseUrlImage } from '../api';\r\n\r\nconst WeatherDetails = (props) => {\r\n    if(props.weather){\r\n        return (\r\n            <div className=\"col-12 p-3\">\r\n                <div className=\"card col-10 col-md-6 mx-auto\">\r\n                    <div className=\"card-body\">\r\n                        <h2>\r\n                            Today, {props.city}\r\n                        </h2>\r\n                        <h2>\r\n                            <img src={baseUrlImage + props.weather.icon + '@4x.png'} alt=\"background\" />\r\n                            {props.weather.weather_main}, \r\n                        </h2>\r\n                        <ul>\r\n                            <li>{props.weather.weather_main}</li>\r\n                            <li>Temperature : {Math.round(props.weather.temp - 273.15)}°C</li>\r\n                            <li>Pressure : {props.weather.pressure}</li>\r\n                            <li>Humidity : {props.weather.humidity}</li>\r\n                            <li>Wind-speed : {props.weather.wind_speed}</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else{\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherDetails;","import React, {Component} from 'react';\r\nimport Header from './Header';\r\nimport {API_KEY} from \"../api\";\r\nimport MiniWeatherBox from './MiniWeatherBox';\r\nimport WeatherDetails from './WeatherDetails';\r\nimport './Main.css';\r\n\r\nclass Main extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            city: '',\r\n            days: [],\r\n        }\r\n        this.fetchWeatherDetails = this.fetchWeatherDetails.bind(this);\r\n    }\r\n\r\n    fetchWeatherDetails(){\r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=delhi&APPID=6557810176c36fac5f0db536711a6c52`)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response);\r\n            \r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    updateState = (data) => {\r\n        let days = [];\r\n        for(let i=0;i<5;i++){\r\n            days.push({\r\n                temp: data.list[8*i].main.temp,\r\n                date: data.list[8*i].dt_txt,\r\n                weather_main: data.list[8*i].weather[0].main,\r\n                weather_desc: data.list[8*i].weather[0].description,\r\n                pressure: data.list[8*i].main.pressure,\r\n                wind_speed: data.list[8*i].wind.speed,\r\n                humidity: data.list[8*i].main.humidity,\r\n                icon: data.list[8*i].weather[0].icon,\r\n            });\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            city: data.city.name,\r\n            days: days,\r\n        });\r\n    }\r\n    makeApiCall = async (city) => {        \r\n        await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${API_KEY}`)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response);\r\n            this.updateState(response);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            return false;\r\n        });\r\n    }\r\n    \r\n    render(){\r\n\r\n        const MiniWeatherBoxes = () => {\r\n            const weatherBoxes = this.state.days.slice(1).map(day => (\r\n              <li key={day.date} className=\"weather-box\">\r\n                <MiniWeatherBox weather={day} />\r\n              </li>\r\n            ));\r\n      \r\n            return <ul className='weather-box-list'>{weatherBoxes}</ul>;\r\n        };\r\n\r\n        return (\r\n            <div className=\" main\">\r\n                <Header makeApiCall={this.makeApiCall} />\r\n                <WeatherDetails weather={this.state.days[0]} city={this.state.city} />\r\n                <MiniWeatherBoxes />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n      <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}